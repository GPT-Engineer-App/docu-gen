from fastapi import FastAPI, File, UploadFile, HTTPException
from fastapi.responses import JSONResponse
from sqlalchemy import create_engine, Column, Integer, String, Text
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy.orm import sessionmaker
import openai
import fitz  # PyMuPDF
import docx
import os

# Initialize FastAPI app
app = FastAPI()

# Database setup
DATABASE_URL = "sqlite:///./test.db"
engine = create_engine(DATABASE_URL)
SessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)
Base = declarative_base()

class Document(Base):
    __tablename__ = "documents"
    id = Column(Integer, primary_key=True, index=True)
    filename = Column(String, index=True)
    content = Column(Text)

class Question(Base):
    __tablename__ = "questions"
    id = Column(Integer, primary_key=True, index=True)
    document_id = Column(Integer, index=True)
    question = Column(Text)

Base.metadata.create_all(bind=engine)

# OpenAI API key
openai.api_key = os.getenv("OPENAI_API_KEY")

# Helper functions
def extract_text_from_pdf(file):
    doc = fitz.open(stream=file, filetype="pdf")
    text = ""
    for page in doc:
        text += page.get_text()
    return text

def extract_text_from_docx(file):
    doc = docx.Document(file)
    text = ""
    for para in doc.paragraphs:
        text += para.text
    return text

def generate_questions(text, num_questions=5):
    response = openai.Completion.create(
        engine="davinci",
        prompt=f"Generate {num_questions} multiple choice questions based on the following text:\n\n{text}",
        max_tokens=150
    )
    questions = response.choices[0].text.strip().split("\n")
    return questions

# Routes
@app.post("/upload/")
async def upload_file(file: UploadFile = File(...)):
    if file.content_type not in ["application/pdf", "application/vnd.openxmlformats-officedocument.wordprocessingml.document", "text/plain"]:
        raise HTTPException(status_code=400, detail="Invalid file type")

    content = ""
    if file.content_type == "application/pdf":
        content = extract_text_from_pdf(await file.read())
    elif file.content_type == "application/vnd.openxmlformats-officedocument.wordprocessingml.document":
        content = extract_text_from_docx(await file.read())
    elif file.content_type == "text/plain":
        content = (await file.read()).decode("utf-8")

    db = SessionLocal()
    db_document = Document(filename=file.filename, content=content)
    db.add(db_document)
    db.commit()
    db.refresh(db_document)

    questions = generate_questions(content)
    for q in questions:
        db_question = Question(document_id=db_document.id, question=q)
        db.add(db_question)
    db.commit()

    return JSONResponse(content={"document_id": db_document.id, "questions": questions})

@app.get("/questions/{document_id}")
async def get_questions(document_id: int):
    db = SessionLocal()
    questions = db.query(Question).filter(Question.document_id == document_id).all()
    return JSONResponse(content={"questions": [q.question for q in questions]})